<?php

namespace Bfg\Dev\Commands;

use Illuminate\Foundation\Console\ComponentMakeCommand;
use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Str;

/**
 * Class MakeComponentCommand
 * @package Bfg\Dev\Commands
 */
class MakeComponentCommand extends ComponentMakeCommand
{
    public function handle()
    {
        return parent::handle(); // TODO: Change the autogenerated stub
    }

    /**
     * Write the view for the component.
     *
     * @return void
     */
    protected function writeView()
    {
        $component = $this->getView();

        $path = resource_path("js/components/" . $this->getViewPath() . ".vue");

        if (! $this->files->isDirectory(dirname($path))) {
            $this->files->makeDirectory(dirname($path), 0777, true, true);
        }

        if ($this->files->exists($path) && ! $this->option('force')) {
            $this->error('View already exists!');

            return;
        }

        $js_template = <<<HTML
<template>
    <div>[app::$component] Component</div>
</template>

<script>
    export default {
        name: "app::{$component}",
        props: {},
        data () {
            return {

            };
        },
        mounted () {},
        computed: {},
        watch: {},
        methods: {}
    }
</script>
HTML;

        file_put_contents(
            $path,
            $js_template
        );
    }

    /**
     * Build the class with the given name.
     *
     * @param  string  $name
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    protected function buildClass($name)
    {
        return $this->replaceComponentName(parent::buildClass($name));
    }

    /**
     * @param  string  $stub
     * @return string
     */
    protected function replaceComponentName(string $stub)
    {
        return str_replace(
            'DummyComponentName',
            'app::' . $this->getView(),
            $stub
        );
    }

    /**
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return __DIR__.'/stubs/bfg-component.stub';
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace.'\Components';
    }

    /**
     * Get the view name relative to the components directory.
     *
     * @return string view
     */
    protected function getView()
    {
        $name = str_replace('\\', '/', $this->argument('name'));

        return collect(explode('/', $name))
            ->map(function ($part) {
                return Str::camel($part);
            })
            ->implode('.');
    }

    /**
     * Get the view name relative to the components directory.
     *
     * @return string view
     */
    protected function getViewPath()
    {
        $name = str_replace('\\', '/', $this->argument('name'));

        return collect(explode('/', $name))
            ->map(function ($part) {
                return Str::camel($part);
            })
            ->implode('/');
    }
}